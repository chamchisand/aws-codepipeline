AWSTemplateFormatVersion: 2010-09-09
Description: HelloWorld Template

Parameters:
  AppName:
    Type: String
    Default: HelloWorld
  InstanceType:
    Type: String
    Default: t2.micro
  InstanceProfile:
    Type: String
  ImageId:
    Type: AWS::EC2::Image::Id
    Default: ami-0ad99772
  VpcId:
    Type: AWS::EC2::VPC::Id
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
  SubnetIDs:
    Type: List<AWS::EC2::Subnet::Id>
  GitOwner:
    Type: String
  GitRepo:
    Type: String
  GitBranch:
    Type: String
  # GitOAuthToken:
  #   Type: String

Resources:
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess
        - arn:aws:iam::aws:policy/AWSCodeDeployDeployerAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

  Artifact:
    Type: AWS::S3::Bucket

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join
          - ''
          - - !Ref AppName
            - ' - webserver security group'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6: ::0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIpv6: ::0/0

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join
          - ''
          - - !Ref AppName
            - ' - load balancer security group'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6: ::0/0

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      EbsOptimized: false
      InstanceMonitoring: false
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          wget https://aws-codedeploy-us-west-2.s3.amazonaws.com/latest/install
          chmod +x ./install
          sudo ./install auto

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        Fn::GetAZs:
          Ref: AWS::Region
      Cooldown: 300
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref LaunchConfig
      MaxSize: 1
      MinSize: 1
      DesiredCapacity: 1
      TargetGroupARNs:
        - !Ref TargetGroup
      Tags:
        - Key: Name
          Value: !Ref AppName
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 60
      VpcId: !Ref VpcId

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      Subnets: !Ref SubnetIDs
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  Application:
    Type: AWS::CodeDeploy::Application

  DeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref Application
      AutoScalingGroups:
        - !Ref AutoScalingGroup
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      DeploymentStyle:
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
        DeploymentType: IN_PLACE
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      LoadBalancerInfo:
        TargetGroupInfoList:
          - Name: !GetAtt TargetGroup.TargetGroupName

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref Artifact
        Type: S3
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GitOwner
                Repo: !Ref GitRepo
                BranchName: !Ref GitBranch
                PollForSourceChanges: false
                # OAuthToken: !Ref GitOAuthToken
        - Name: Release
          Actions:
            - Name: Release
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              Configuration:
                ApplicationName: !Ref Application
                DeploymentGroupName: !Ref DeploymentGroup
